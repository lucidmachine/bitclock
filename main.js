(()=>{"use strict";const n=n=>Math.floor(n/10),t=n=>n%10,e=(n,t)=>((n,t)=>(n&t)>0)(n,t)?1:0;var i=function(){return document.getElementById("clock-canvas")},c=function(){var c=((i=new Date)=>{return(c=i,[n(c.getHours()),t(c.getHours()),n(c.getMinutes()),t(c.getMinutes()),n(c.getSeconds()),t(c.getSeconds())]).map((n=>(n=>[e(8,n),e(4,n),e(2,n),e(1,n)])(n)));var c})();(function(n){return(e=document.getElementsByClassName("clock-div"),t=e,[].slice.call(t)).forEach((function(t){return function(n,t){n.innerHTML=function(n){var t=n.map((function(n){return function(n){var t=n.map((function(n){return function(n){return'<div class="bit '+(n?"on":"off")+'">'+n+"</div>"}(n)})).join("\n    ");return'  <div class="digit">\n    '+t+"\n  </div>"}(n)})).join("\n");return'<div class="time">\n'+t+"\n</div>"}(t)}(t,n)}));var t,e})(c),function(n){!function(n){var t=n.slice(0,4),e=i();e.style.display="none",function(n,t,e,i){var c=n.getContext("2d");c.clearRect(0,0,n.width,n.height),t.forEach((function(n,t){n.forEach((function(n,r){!function(n,t,e,i,c,r){n.fillStyle=function(n){return n?"rgb(255, 255, 255)":"rgb(0, 0, 0)"}(t),n.fillRect(e*c,i*r,c,r)}(c,n,t,r,e,i)}))}))}(e,t,e.width/t.length,e.height/t[0].length)}(n);var t=document.getElementById("favicon"),e=t.cloneNode(!0);e.href=i().toDataURL(),t.parentNode.replaceChild(e,t)}(c)};setInterval(c,1e3),c()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,